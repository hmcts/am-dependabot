name: 'Combine PRs'

# Controls when the action will run - in this case triggered manually
on:
  workflow_dispatch:
    inputs:
      branchPrefix:
        description: 'Branch prefix to find combinable PRs based on'
        required: true
        default: 'dependabot'
      mustBeGreen:
        description: 'Only combine PRs that are green (status is success)'
        required: true
        default: false
      combineBranchName:
        description: 'Name of the branch to combine PRs into'
        required: true
        default: 'combine-prs-branch'
      ignoreLabel:
        description: 'Exclude PRs with this label'
        required: true
        default: 'nocombine'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "combine-prs"
  combine-prs:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - uses: actions/github-script@v3
        id: fetch-branch-names
        name: Fetch branch names
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const pulls = await github.paginate('GET /repos/:owner/:repo/pulls', {
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'asc'
            });

            branches = [];
            prs = [];
            base_branch = null;
            for (const pull of pulls) {
              const branch = pull['head']['ref'];
              console.log('PULL FOR BRANCH: ' + branch);
              if (branch.startsWith('${{ github.event.inputs.branchPrefix }}')) {
                console.log('BRANCH MATCHED: ' + branch);
                statusOK = true;
                if(${{ github.event.inputs.mustBeGreen }}) {
                  console.log('CHECKING GREEN STATUS: ' + branch);
                  const statuses = await github.paginate('GET /repos/{owner}/{repo}/commits/{ref}/status', {
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: branch
                  });
                  if(statuses.length > 0) {
                    const latest_status = statuses[0]['state'];
                    console.log('VALIDATING STATUS: ' + latest_status);
                    if(latest_status != 'success') {
                      console.log('DISCARDING ' + branch + ' WITH STATUS ' + latest_status);
                      statusOK = false;
                    }
                  }
                }
                console.log('CHECKING LABELS: ' + branch);
                const labels = pull['labels'];
                for(const label of labels) {
                  const labelName = label['name'];
                  console.log('CHECKING LABEL: ' + labelName);
                  if(labelName == '${{ github.event.inputs.ignoreLabel }}') {
                    console.log('DISCARDING ' + branch + ' WITH LABEL ' + labelName);
                    statusOK = false;
                  }
                }
                if (statusOK) {
                  console.log('ADDING BRANCH TO ARRAY: ' + branch);
                  branches.push(branch);
                  prs.push('#' + pull['number'] + ' ' + pull['title']);
                  base_branch = pull['base']['ref'];
                }
              }
            }

            if (branches.length == 0) {
              core.setFailed('No PRs/branches matched criteria');
              return;
            }

            core.setOutput('base-branch', base_branch);
            core.setOutput('prs-string', prs.join('\n'));
            
            console.log('Base Branch: ' + base_branch);
            console.log('prs-string: ' + prs.join('\n'));

            combined = branches.join(' ')
            echo "NUMBER OF BRANCHES: ${#branchesArray[@]}"
            console.log('COMBINED BRANCHES: ' + combined);
            return combined

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.3
        with:
          fetch-depth: 0

      # Creates a branch with other PR branches merged together
      - name: Created combined branch
        env:
          BASE_BRANCH: ${{ steps.fetch-branch-names.outputs.base-branch }}
          BRANCHES_TO_COMBINE: ${{ steps.fetch-branch-names.outputs.result }}
          COMBINE_BRANCH_NAME: ${{ github.event.inputs.combineBranchName }}
        run: |
          sourcebranches="${BRANCHES_TO_COMBINE%\"}"
          sourcebranches="${sourcebranches#\"}"
          
          basebranch="${BASE_BRANCH%\"}"
          basebranch="${basebranch#\"}"

          git config pull.rebase false
          git config user.name github-actions
          git config user.email github-actions@github.com
          
          combineBranchExists=$(git ls-remote --heads origin ${COMBINE_BRANCH_NAME})

          if [[ -z ${combineBranchExists} ]]; then
            echo "COMBINED BRANCH $COMBINE_BRANCH_NAME DOES NOT EXIST. CREATING BRANCH $COMBINE_BRANCH_NAME"
            
            git branch $COMBINE_BRANCH_NAME $basebranch
          else
            echo "COMBINED BRANCH $COMBINE_BRANCH_NAME ALREADY EXISTS"
          fi

          git checkout $COMBINE_BRANCH_NAME

          branchesArray=($sourcebranches)
          for branch in "${branchesArray[@]}"
          do
            printf "BRANCH NAME: $branch\n"
            git pull origin $branch --no-edit
          done

          git push origin $COMBINE_BRANCH_NAME

      # Creates a PR with the new combined branch
      - uses: actions/github-script@v3
        name: Create Combined Pull Request
        env:
          PRS_STRING: ${{ steps.fetch-branch-names.outputs.prs-string }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const prString = process.env.PRS_STRING;
            const body = 'This PR was created by the Combine PRs action by combining the following PRs:\n' + prString;
            await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Combined PR',
              head: '${{ github.event.inputs.combineBranchName }}',
              base: '${{ steps.fetch-branch-names.outputs.base-branch }}',
              body: body
            });